from transformers import pipeline

prompt = "List of questions to ask someone:\n1."

class ZeroShot():
    def __init__(self, total_num_questions, max_length, num_sequences, filename):
        self.prompt = "List of questions to ask someone:\n1."
        self.total_num_questions = total_num_questions
        self.num_questions = 0
        self.questions = []
        self.max_length = max_length
        self.num_sequences = num_sequences
        self.filename = filename
        open(filename, 'w').close()

    def process_questions(self, sequences):
        # TODO: process the text generated by the model
        pattern = re.compile(r'^[1-9]\..+?\?')
        questions = []
        for sequence in sequences:
            generated_text = sequence['generated_text']
            texts = generated_text.split('\n')[1:]
            for text in texts:
                if pattern.fullmatch(text):
                    question = re.sub(r'^[1-9]\.\s', '', text)
                    questions.append(question)
        return questions

    def generate_test_cases(self, model_name=None):
        if model_name:
            generator = pipeline('text-generation', model=model_name,
                                max_length=self.max_length,
                                num_return_sequences=self.num_sequences)
        else:
            generator = pipeline('text-generation', max_length=150,
                                num_return_sequences=self.num_sequences)

        while self.num_questions < self.total_num_questions:
            sequences = generator(prompt)
            questions = process_questions(sequences)
            self.questions += questions
            self.save_to_file(questions)
            self.num_questions += len(questions)

        return self.questions
    
    def save_to_file(self, questions):
        with open(self.filename, 'a') as output:
            for question in questions:
                output.write(question + '\n')
        return